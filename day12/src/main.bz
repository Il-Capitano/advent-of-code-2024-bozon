import std::format;
import std::vector;
import std::utils;
import std::math;
import common;

function parse_input() -> std::vector<std::vector<uint8> >
{
	let mut result = std::vector<std::vector<uint8> >();

	let input = read_file("input.txt");
	for (let line in input.as_str().by_line())
	{
		let &mut row = result.emplace_back();
		for (let c in line.chars())
		{
			std::assert(c >= 'A' && c <= 'Z');
			row.push_back(c as uint8);
		}
	}

	return move result;
}

function init_2d_array(T: typename, height: usize, width: usize) -> std::vector<std::vector<T> >
{
	let mut result = std::vector<std::vector<T> >();
	result.resize(height);
	for (let &mut row in result)
	{
		row.resize(width);
	}

	return move result;
}

function get_area_and_perimeter(
	map: &std::vector<std::vector<uint8> >,
	visited: &mut std::vector<std::vector<bool> >,
	i: usize,
	j: usize,
	plot: uint8,
) -> [usize, usize]
{
	if (visited[i, j])
	{
		return [0, 0];
	}
	visited[i, j] = true;

	let mut area = 1uz;
	let mut perimeter = 0uz;
	if (i != 0 && map[i - 1, j] == plot)
	{
		let [top_area, top_perimeter] = get_area_and_perimeter(map, visited, i - 1, j, plot);
		area += top_area;
		perimeter += top_perimeter;
	}
	else
	{
		perimeter += 1;
	}
	if (i != map.size() - 1 && map[i + 1, j] == plot)
	{
		let [bottom_area, bottom_perimeter] = get_area_and_perimeter(map, visited, i + 1, j, plot);
		area += bottom_area;
		perimeter += bottom_perimeter;
	}
	else
	{
		perimeter += 1;
	}
	if (j != 0 && map[i, j - 1] == plot)
	{
		let [left_area, left_perimeter] = get_area_and_perimeter(map, visited, i, j - 1, plot);
		area += left_area;
		perimeter += left_perimeter;
	}
	else
	{
		perimeter += 1;
	}
	if (j != map[i].size() - 1 && map[i, j + 1] == plot)
	{
		let [right_area, right_perimeter] = get_area_and_perimeter(map, visited, i, j + 1, plot);
		area += right_area;
		perimeter += right_perimeter;
	}
	else
	{
		perimeter += 1;
	}

	return [area, perimeter];
}

function part1(map: &std::vector<std::vector<uint8> >) -> usize
{
	let mut visited = init_2d_array(bool, map.size(), map[0].size());

	let mut total_price = 0uz;
	for (let i in 0..map.size())
	{
		for (let j in 0..map[0].size())
		{
			let [area, perimeter] = get_area_and_perimeter(map, visited, i, j, map[i, j]);
			total_price += area * perimeter;
		}
	}
	return total_price;
}

function get_area_and_bounds(
	map: &std::vector<std::vector<uint8> >,
	visited: &mut std::vector<std::vector<bool> >,
	i: usize,
	j: usize,
	plot: uint8,
) -> [usize, [usize, usize], [usize, usize]]
{
	let mut area = 0uz;
	let mut i_min = i;
	let mut i_max = i;
	let mut j_min = j;
	let mut j_max = j;
	if (visited[i, j])
	{
		return [area, [i_min, i_max], [j_min, j_max]];
	}
	visited[i, j] = true;
	area += 1;

	if (i != 0 && map[i - 1, j] == plot)
	{
		let [top_area, top_i_bounds, top_j_bounds] = get_area_and_bounds(map, visited, i - 1, j, plot);
		area += top_area;
		i_min = std::min(i_min, top_i_bounds[0]);
		i_max = std::max(i_max, top_i_bounds[1]);
		j_min = std::min(j_min, top_j_bounds[0]);
		j_max = std::max(j_max, top_j_bounds[1]);
	}
	if (i != map.size() - 1 && map[i + 1, j] == plot)
	{
		let [bottom_area, bottom_i_bounds, bottom_j_bounds] = get_area_and_bounds(map, visited, i + 1, j, plot);
		area += bottom_area;
		i_min = std::min(i_min, bottom_i_bounds[0]);
		i_max = std::max(i_max, bottom_i_bounds[1]);
		j_min = std::min(j_min, bottom_j_bounds[0]);
		j_max = std::max(j_max, bottom_j_bounds[1]);
	}
	if (j != 0 && map[i, j - 1] == plot)
	{
		let [left_area, left_i_bounds, left_j_bounds] = get_area_and_bounds(map, visited, i, j - 1, plot);
		area += left_area;
		i_min = std::min(i_min, left_i_bounds[0]);
		i_max = std::max(i_max, left_i_bounds[1]);
		j_min = std::min(j_min, left_j_bounds[0]);
		j_max = std::max(j_max, left_j_bounds[1]);
	}
	if (j != map[i].size() - 1 && map[i, j + 1] == plot)
	{
		let [right_area, right_i_bounds, right_j_bounds] = get_area_and_bounds(map, visited, i, j + 1, plot);
		area += right_area;
		i_min = std::min(i_min, right_i_bounds[0]);
		i_max = std::max(i_max, right_i_bounds[1]);
		j_min = std::min(j_min, right_j_bounds[0]);
		j_max = std::max(j_max, right_j_bounds[1]);
	}

	return [area, [i_min, i_max], [j_min, j_max]];
}

function get_area_and_side_count(
	map: &std::vector<std::vector<uint8> >,
	visited: &mut std::vector<std::vector<bool> >,
	i: usize,
	j: usize,
	plot: uint8,
) -> [usize, usize]
{
	if (visited[i, j])
	{
		return [0, 0];
	}

	let visited_copy = visited;
	let [area, [i_min, i_max], [j_min, j_max]] = get_area_and_bounds(map, visited, i, j, plot);

	let mut sides = 0uz;
	for (let i in i_min..=i_max + 1)
	{
		let mut on_edge = false;
		for (let j in j_min..=j_max)
		{
			let top_in_area = i != 0 && visited[i - 1, j] != visited_copy[i - 1, j];
			let bottom_in_area = i != map.size() && visited[i, j] != visited_copy[i, j];
			if (top_in_area != bottom_in_area)
			{
				let prev_top_in_area = i != 0 && j != 0 && visited[i - 1, j - 1] != visited_copy[i - 1, j - 1];
				if (on_edge && prev_top_in_area != top_in_area)
				{
					sides += 1;
				}
				else if (!on_edge)
				{
					on_edge = true;
					sides += 1;
				}
			}
			else
			{
				on_edge = false;
			}
		}
	}
	for (let j in j_min..=j_max + 1)
	{
		let mut on_edge = false;
		for (let i in i_min..=i_max)
		{
			let left_in_area = j != 0 && visited[i, j - 1] != visited_copy[i, j - 1];
			let right_in_area = j != map[i].size() && visited[i, j] != visited_copy[i, j];
			if (left_in_area != right_in_area)
			{
				let prev_left_in_area = i != 0 && j != 0 && visited[i - 1, j - 1] != visited_copy[i - 1, j - 1];
				if (on_edge && prev_left_in_area != left_in_area)
				{
					sides += 1;
				}
				else if (!on_edge)
				{
					on_edge = true;
					sides += 1;
				}
			}
			else
			{
				on_edge = false;
			}
		}
	}

	return [area, sides];
}

function part2(map: &std::vector<std::vector<uint8> >) -> usize
{
	let mut visited = init_2d_array(bool, map.size(), map[0].size());

	let mut total_price = 0uz;
	for (let i in 0..map.size())
	{
		for (let j in 0..map[0].size())
		{
			let [area, side_count] = get_area_and_side_count(map, visited, i, j, map[i, j]);
			total_price += area * side_count;
		}
	}
	return total_price;
}

function main()
{
	let input = parse_input();

	let part1_result = part1(input);
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input);
	std::print("part 2: {}\n", part2_result);
}
