import std::format;
import std::vector;
import common;

struct robot_info
{
	.p: [int64, int64];
	.v: [int64, int64];
}

function parse_input() -> std::vector<robot_info>
{
	let input = read_file("input.txt");
	let mut result = std::vector<robot_info>();
	for (let line in input.as_str().by_line())
	{
		let [p, v] = line.split(' ');
		let [_, p] = p.split('=');
		let [px, py] = p.split(',');
		let [_, v] = v.split('=');
		let [vx, vy] = v.split(',');
		result.push_back(robot_info[
			[parse_int(int64, px), parse_int(int64, py)],
			[parse_int(int64, vx), parse_int(int64, vy)],
		]);
	}

	return move result;
}

function mod(lhs: int64, rhs: int64) -> int64
{
	let result = lhs % rhs;
	return if (result < 0) {
		result + rhs
	} else {
		result
	};
}

function part1(robots: [: robot_info]) -> int32
{
	consteval width = 101;
	consteval height = 103;

	let mut top_left_count = 0;
	let mut top_right_count = 0;
	let mut bottom_left_count = 0;
	let mut bottom_right_count = 0;
	for (let &robot in robots)
	{
		let px = mod(robot.p[0] + 100 * robot.v[0], width);
		let py = mod(robot.p[1] + 100 * robot.v[1], height);
		if (px < width / 2 && py < height / 2)
		{
			top_left_count += 1;
		}
		else if (px > width / 2 && py < height / 2)
		{
			top_right_count += 1;
		}
		else if (px < width / 2 && py > height / 2)
		{
			bottom_left_count += 1;
		}
		else if (px > width / 2 && py > height / 2)
		{
			bottom_right_count += 1;
		}
	}
	return top_left_count * top_right_count * bottom_left_count * bottom_right_count;
}

function part2(robots: [: robot_info]) -> int32
{
	consteval width = 101;
	consteval height = 103;

	let mut map = std::vector<std::vector<int32> >();
	map.resize(height as usize);
	for (let &mut row in map)
	{
		row.resize(width as usize);
	}

	for (let t in 0..)
	{
		for (let &mut row in map)
		{
			for (let &mut cell in row)
			{
				cell = 0;
			}
		}

		for (let &robot in robots)
		{
			let px = mod(robot.p[0] + t * robot.v[0], width);
			let py = mod(robot.p[1] + t * robot.v[1], height);
			map[py, px] += 1;
		}

		let mut has_filled_region = false;
		for (let i in 1..height - 1)
		{
			for (let j in 1..width - 1)
			{
				if (
					map[i, j] != 0
					&& map[i - 1, j - 1] != 0
					&& map[i - 1, j] != 0
					&& map[i - 1, j + 1] != 0
					&& map[i, j - 1] != 0
					&& map[i, j + 1] != 0
					&& map[i + 1, j - 1] != 0
					&& map[i + 1, j] != 0
					&& map[i + 1, j + 1] != 0
				)
				{
					has_filled_region = true;
				}
			}
		}

		if (has_filled_region)
		{
			return t;
		}
	}

	return 0;
}

function main()
{
	let input = parse_input();

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
