import std::format;
import std::vector;
import std::utils;
import std::math;
import common;

function get_numeric_position(c: char) -> [int32, int32]
{
	return switch (c) {
		'0' => [3, 1],
		'1' => [2, 0],
		'2' => [2, 1],
		'3' => [2, 2],
		'4' => [1, 0],
		'5' => [1, 1],
		'6' => [1, 2],
		'7' => [0, 0],
		'8' => [0, 1],
		'9' => [0, 2],
		'A' => [3, 2],
		else => unreachable,
	};
}

function get_directional_position(c: char) -> [int32, int32]
{
	return switch (c) {
		'^' => [0, 1],
		'<' => [1, 0],
		'v' => [1, 1],
		'>' => [1, 2],
		'A' => [0, 2],
		else => unreachable,
	};
}

function get_id(
	move_amount: [int32, int32],
	robot_count: int32,
	first_vertical_legal: bool,
	first_horizontal_legal: bool,
) -> usize
{
	std::assert(move_amount[0] >= -3 && move_amount[0] <= 3);
	std::assert(move_amount[1] >= -2 && move_amount[1] <= 2);
	let result = (move_amount[0] + 3);
	let result = result * 5 + (move_amount[1] + 2);
	let result = result * 26 + robot_count;
	let result = result * 2 + if (first_vertical_legal) { 1 } else { 0 };
	let result = result * 2 + if (first_horizontal_legal) { 1 } else { 0 };
	return result as usize;
}

function count_presses(
	move_amount: [int32, int32],
	robot_count: int32,
	first_vertical_legal: bool,
	first_horizontal_legal: bool,
	cache: &mut std::vector<int64>,
) -> int64
{
	if (robot_count == 0)
	{
		return std::abs(move_amount[0]) + std::abs(move_amount[1]);
	}

	let id = get_id(move_amount, robot_count, first_vertical_legal, first_horizontal_legal);
	if (id < cache.size() && cache[id] > 0)
	{
		return cache[id];
	}

	let total_presses1 = if (first_vertical_legal) {
		let mut total_presses = 0i64;
		let mut current_pos = get_directional_position('A');
		if (move_amount[0] != 0)
		{
			let end_pos = get_directional_position(if (move_amount[0] < 0) { '^' } else { 'v' });
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				robot_count - 1,
				true,
				true,
				cache,
			);
			total_presses += std::abs(move_amount[0]);
			current_pos = end_pos;
		}
		if (move_amount[1] != 0)
		{
			let end_pos = get_directional_position(if (move_amount[1] < 0) { '<' } else { '>' });
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				robot_count - 1,
				true,
				!(end_pos[1] == 0 && current_pos[0] == 0),
				cache,
			);
			total_presses += std::abs(move_amount[1]);
			current_pos = end_pos;
		}
		let end_pos = get_directional_position('A');
		total_presses += count_presses(
			[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
			robot_count - 1,
			!(current_pos[0] == 1 && current_pos[1] == 0),
			true,
			cache,
		);
		total_presses
	} else {
		int64.max
	};

	let total_presses2 = if (first_horizontal_legal) {
		let mut total_presses = 0i64;
		let mut current_pos = get_directional_position('A');
		if (move_amount[1] != 0)
		{
			let end_pos = get_directional_position(if (move_amount[1] < 0) { '<' } else { '>' });
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				robot_count - 1,
				true,
				!(end_pos[1] == 0 && current_pos[0] == 0),
				cache,
			);
			total_presses += std::abs(move_amount[1]);
			current_pos = end_pos;
		}
		if (move_amount[0] != 0)
		{
			let end_pos = get_directional_position(if (move_amount[0] < 0) { '^' } else { 'v' });
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				robot_count - 1,
				!(current_pos[1] == 0 && end_pos[0] == 0),
				true,
				cache
			);
			total_presses += std::abs(move_amount[0]);
			current_pos = end_pos;
		}
		let end_pos = get_directional_position('A');
		total_presses += count_presses(
			[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
			robot_count - 1,
			!(current_pos[0] == 1 && current_pos[1] == 0),
			true,
			cache,
		);

		total_presses
	} else {
		int64.max
	};

	let total_presses = std::min(total_presses1, total_presses2);
	if (cache.size() <= id)
	{
		cache.resize(id + 1);
	}
	cache[id] = total_presses;
	return total_presses;
}

function part1(codes: [: str]) -> int64
{
	let mut total_complexity = 0i64;
	let mut cache = std::vector<int64>();
	for (let code in codes)
	{
		let mut total_presses = 0i64;
		let mut current_pos = get_numeric_position('A');
		for (let c in code.chars())
		{
			let end_pos = get_numeric_position(c);
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				2,
				!(current_pos[1] == 0 && end_pos[0] == 3),
				!(current_pos[0] == 3 && end_pos[1] == 0),
				cache,
			);
			total_presses += 1;
			current_pos = end_pos;
		}
		total_complexity += total_presses * parse_int(int64, code);
	}
	return total_complexity;
}

function part2(codes: [: str]) -> int64
{
	let mut total_complexity = 0i64;
	let mut cache = std::vector<int64>();
	for (let code in codes)
	{
		let mut total_presses = 0i64;
		let mut current_pos = get_numeric_position('A');
		for (let c in code.chars())
		{
			let end_pos = get_numeric_position(c);
			total_presses += count_presses(
				[end_pos[0] - current_pos[0], end_pos[1] - current_pos[1]],
				25,
				!(current_pos[1] == 0 && end_pos[0] == 3),
				!(current_pos[0] == 3 && end_pos[1] == 0),
				cache,
			);
			total_presses += 1;
			current_pos = end_pos;
		}
		total_complexity += total_presses * parse_int(int64, code);
	}
	return total_complexity;
}

function main()
{
	let input = read_file("input.txt");
	let codes = input.as_str().by_line().collect();

	let part1_result = part1(codes.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(codes.as_slice());
	std::print("part 2: {}\n", part2_result);
}
