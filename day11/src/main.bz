import std::format;
import std::vector;
import common;

function parse_input() -> std::vector<uint64>
{
	let input = read_file("input.txt");
	let mut result = std::vector<uint64>();
	for (let num in input.as_str().split_by(' '))
	{
		result.push_back(parse_int(uint64, num));
	}
	return move result;
}

function is_even_digits(n: uint64) -> bool
{
	return if (n < 100) {
		n >= 10
	} else if (n < 10000) {
		n >= 1000
	} else if (n < 1000000) {
		n >= 100000
	} else if (n < 100000000) {
		n >= 10000000
	} else if (n < 10000000000) {
		n >= 1000000000
	} else if (n < 1000000000000) {
		n >= 100000000000
	} else if (n < 100000000000000) {
		n >= 10000000000000
	} else if (n < 10000000000000000) {
		n >= 1000000000000000
	} else if (n < 1000000000000000000) {
		n >= 100000000000000000
	} else {
		n >= 10000000000000000000
	};
}

function split_even_digits(n: uint64) -> [uint64, uint64]
{
	return if (n < 100) {
		[n / 10, n % 10]
	} else if (n < 10000) {
		[n / 100, n % 100]
	} else if (n < 1000000) {
		[n / 1000, n % 1000]
	} else if (n < 100000000) {
		[n / 10000, n % 10000]
	} else if (n < 10000000000) {
		[n / 100000, n % 100000]
	} else if (n < 1000000000000) {
		[n / 1000000, n % 1000000]
	} else if (n < 100000000000000) {
		[n / 10000000, n % 10000000]
	} else if (n < 10000000000000000) {
		[n / 100000000, n % 100000000]
	} else if (n < 1000000000000000000) {
		[n / 1000000000, n % 1000000000]
	} else {
		[n / 10000000000, n % 10000000000]
	};
}

function part1(stones: [: uint64]) -> usize
{
	let mut stones = std::vector<uint64>(stones);

	for (let _ in 0..25)
	{
		let mut new_stones = std::vector<uint64>();
		for (let stone in stones)
		{
			if (stone == 0)
			{
				new_stones.push_back(1);
			}
			else if (is_even_digits(stone))
			{
				let [left, right] = split_even_digits(stone);
				new_stones.push_back(left);
				new_stones.push_back(right);
			}
			else
			{
				new_stones.push_back(stone * 2024);
			}
		}
		stones = move new_stones;
	}

	return stones.size();
}

function add_stone(counts: &mut std::vector<[uint64, usize]>, stone: uint64, count: usize)
{
	for (let &mut stone_count in counts)
	{
		if (stone_count[0] == stone)
		{
			stone_count[1] += count;
			return;
		}
	}
	counts.push_back([stone, count]);
}

function part2(stones: [: uint64]) -> usize
{
	let mut counts = std::vector<[uint64, usize]>();
	for (let stone in stones)
	{
		add_stone(counts, stone, 1);
	}

	for (let _ in 0..75)
	{
		let mut new_counts = std::vector<[uint64, usize]>();
		for (let [stone, count] in counts)
		{
			if (stone == 0)
			{
				add_stone(new_counts, 1, count);
			}
			else if (is_even_digits(stone))
			{
				let [left, right] = split_even_digits(stone);
				add_stone(new_counts, left, count);
				add_stone(new_counts, right, count);
			}
			else
			{
				add_stone(new_counts, stone * 2024, count);
			}
		}
		counts = move new_counts;
	}

	let mut result = 0uz;
	for (let [_, count] in counts)
	{
		result += count;
	}
	return result;
}

function main()
{
	let input = parse_input();

	let part1_result = part1(input.as_slice());
	std::print("part 1: {}\n", part1_result);
	let part2_result = part2(input.as_slice());
	std::print("part 2: {}\n", part2_result);
}
